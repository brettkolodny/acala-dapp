{"version":3,"sources":["../../page-homa/src/components/SelectToken.module.scss","../../page-homa/src/components/StakingConsole.module.scss","../../page-homa/src/components/RedeemConsole.module.scss","../../page-homa/src/components/TargetRedeemList.module.scss","../../page-homa/src/components/Console.module.scss","../../page-homa/src/components/RedeemList.module.scss","../../page-homa/src/components/StakingOverview.module.scss","../../page-homa/src/components/ExpressConsole.module.scss","../../page-homa/src/components/StakingPoolProvider.tsx","../../page-homa/src/components/StakingTokenBalances.tsx","../../page-homa/src/components/SelectToken.tsx","../../page-homa/src/components/SystemInfo.tsx","../../page-homa/src/components/StakingConsole.tsx","../../page-homa/src/components/TargetRedeemList.tsx","../../page-homa/src/components/RedeemConsole.tsx","../../page-homa/src/components/Console.tsx","../../page-homa/src/components/StakingPool.tsx","../../page-homa/src/components/Transaction.tsx","../../page-homa/src/components/RedeemList.tsx","../../page-homa/src/components/Advanced.tsx","../../page-homa/src/components/StakingOverview.tsx","../../page-homa/src/components/ExpressConsole.tsx","../../page-homa/src/components/Express.tsx","../../page-homa/src/index.tsx"],"names":["module","exports","StakingPoolContext","createContext","StakingPoolProvider","memo","children","useState","action","setAction","result","useStakingPool","useInitialize","isInitialized","setEnd","useEffect","stakingPool","Provider","value","displayName","StakingTokeBalances","useConstants","liquidCurrency","stakingCurrency","header","padding","style","Item","label","getTokenName","token","SelectToken","useContext","config","render","activeContentClassName","classes","activeContent","className","root","onChange","noop","placeholder","SystemInfo","stakingPoolHelper","pair","balance","Fixed18","fromNatural","currency","div","liquidExchangeRate","pairSymbol","data","convertToFixed18","maxBondRatio","minBondRatio","StakingConsole","rewardRate","useBalance","validator","useFormValidator","stakingBalance","type","form","useFormik","initialValues","onSubmit","validate","resetForm","useCallback","receivedLiquidToken","useMemo","values","convertToLiquid","ZERO","handleStakingBalanceChange","setFieldValue","profit","mul","container","item","notice","error","errors","id","name","onMax","toNumber","showMaxBtn","justity","txBtn","disabled","method","onSuccess","params","numToFixed18Inner","section","size","TargetRedeemList","eraDuration","freeList","map","era","free","duration","formatDuration","currentEra","menuClassName","menu","selectedRender","RedeemConsole","unbondingDuration","redeemType","setRedeemType","setEra","freeLiquidityCurrencyAmount","communalFree","freeLiquidityCurrencyAmountInTarget","_result","find","amount","max","Number","POSITIVE_INFINITY","min","target","equalMin","targetEra","bondingDuration","climeFee","claimFee","handleAmountInput","select","checked","onClick","length","targetInput","eraInfo","_params","Target","getParams","info","condition","sub","Console","handleChange","Panel","key","tab","StakingPool","tableConfig","align","dataIndex","icon","title","bondRatio","communalBondedRatio","total","communalTotal","totalBonded","totalFree","totalUnbonding","unbondingToFree","showHeader","Transaction","hash","fromParts","keys","Object","marginLeft","Map","get","time","success","RedeemList","currentRedeem","useCurrentRedeem","redeemList","Advanced","span","Stake","useStakingTotalAmount","useStakingValue","clsx","stake","card","stakingAmount","stakingValue","Balance","balanceContainer","balanceBlock","balanceClasses","Property","APR","useStakingRewardAPR","profitOneDay","property","wrapper","content","inner","tokenName","StakingOverview","contentClassName","Price","helper","useStakingPoolHelper","exchangeRate","StakePanel","setAmount","useRef","setError","stakingCurrencyBalance","eliminateGap","innerToString","isDisabled","current","panelContent","main","balanceInput","exposeReset","reset","initCurrencies","onError","swap","actionBtn","UnstakePanel","liquidCurrencyBalance","maxToUnstake","fee","ExpressConsole","Express","PageHoma","Title","Content"],"mappings":"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","file":"static/js/4.78468e45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SelectToken_root__WaObU\",\"activeContent\":\"SelectToken_activeContent__2nBiU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"StakingConsole_root__2ZpIn\",\"notice\":\"StakingConsole_notice__SoNP2\",\"txBtn\":\"StakingConsole_txBtn__1tPDy\",\"listItem\":\"StakingConsole_listItem__3Sjy_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"RedeemConsole_root__3YJJ1\",\"notice\":\"RedeemConsole_notice__3lcla\",\"eraInfo\":\"RedeemConsole_eraInfo__1Pgb3\",\"txBtn\":\"RedeemConsole_txBtn__1Id8q\",\"select\":\"RedeemConsole_select__3y5ue\",\"item\":\"RedeemConsole_item__1VKqm\",\"targetInput\":\"RedeemConsole_targetInput__1Dd_i\",\"menu\":\"RedeemConsole_menu__2-5oB\",\"listItem\":\"RedeemConsole_listItem__wQ7VE\",\"targetRadio\":\"RedeemConsole_targetRadio__1t07H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"TargetRedeemList_menu__2cUvs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Console_root__3z4Ta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"RedeemList_header__2ls_n\",\"currentRedeem\":\"RedeemList_currentRedeem__2mygm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"StakingOverview_root__1xv5g\",\"card\":\"StakingOverview_card__2pPdV\",\"title\":\"StakingOverview_title__2H0n2\",\"stake\":\"StakingOverview_stake__7gEv-\",\"stakingAmount\":\"StakingOverview_stakingAmount__ogNPh\",\"stakingValue\":\"StakingOverview_stakingValue__3F8ZH\",\"balance\":\"StakingOverview_balance__21Aef\",\"balanceContainer\":\"StakingOverview_balanceContainer__9dvQk\",\"balanceBlock\":\"StakingOverview_balanceBlock__26jLH\",\"property\":\"StakingOverview_property__3TzHy\",\"wrapper\":\"StakingOverview_wrapper__zRSpK\",\"content\":\"StakingOverview_content__2ZQax\",\"profit\":\"StakingOverview_profit__2279x\",\"inner\":\"StakingOverview_inner__2T_ys\",\"label\":\"StakingOverview_label__3ZPMC\",\"data\":\"StakingOverview_data__383_A\",\"tokenName\":\"StakingOverview_tokenName__Iesvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panelContent\":\"ExpressConsole_panelContent__25Rlr\",\"main\":\"ExpressConsole_main__3WgNu\",\"balanceInput\":\"ExpressConsole_balanceInput__AYM7S\",\"actionBtn\":\"ExpressConsole_actionBtn__2I6qC\"};","import React, { createContext, FC, memo, useState, useEffect } from 'react';\nimport { useStakingPool, UseStakingPoolReturnType, useInitialize } from '@acala-dapp/react-hooks';\nimport { PageLoading } from '@acala-dapp/ui-components';\n\nexport type ACTION_TYPE = 'staking' | 'redeem';\n\nexport interface ContextData extends UseStakingPoolReturnType {\n  action: ACTION_TYPE;\n  setAction: (type: ACTION_TYPE) => void;\n}\n\nexport const StakingPoolContext = createContext<ContextData>({} as ContextData);\n\nexport const StakingPoolProvider: FC = memo(({ children }) => {\n  const [action, setAction] = useState<ACTION_TYPE>('staking');\n  const result = useStakingPool();\n  const { isInitialized, setEnd } = useInitialize();\n\n  useEffect(() => {\n    if (!result) return;\n\n    if (result.stakingPool) {\n      setEnd();\n    }\n  }, [result, setEnd]);\n\n  return (\n    <StakingPoolContext.Provider value={{ ...result, action, setAction }}>\n      {isInitialized ? children : <PageLoading />}\n    </StakingPoolContext.Provider>\n  );\n});\n\nStakingPoolProvider.displayName = 'StakingPoolProvider';\n","import React, { FC } from 'react';\n\nimport { useConstants } from '@acala-dapp/react-hooks';\nimport { Card, List } from '@acala-dapp/ui-components';\nimport { UserBalance, getTokenName } from '@acala-dapp/react-components';\nimport { CurrencyLike } from '@acala-dapp/react-hooks/types';\n\ninterface TableData {\n  token: CurrencyLike;\n}\n\nexport const StakingTokeBalances: FC = () => {\n  const { liquidCurrency, stakingCurrency } = useConstants();\n\n  return (\n    <Card header='Balance'\n      padding={false}>\n      <List style='list'>\n        <List.Item\n          label={getTokenName(stakingCurrency)}\n          value={<UserBalance token={stakingCurrency}/>}\n        />\n        <List.Item\n          label={getTokenName(liquidCurrency)}\n          value={<UserBalance token={liquidCurrency}/>}\n        />\n      </List>\n    </Card>\n  );\n};\n","import React, { FC, memo, useContext } from 'react';\nimport { noop } from 'lodash';\n\nimport { Dropdown } from '@acala-dapp/ui-components';\nimport { getTokenName } from '@acala-dapp/react-components';\n\nimport classes from './SelectToken.module.scss';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const SelectToken: FC = memo(() => {\n  const { stakingPool } = useContext(StakingPoolContext);\n  const DEFAULT_VALUE = 'default';\n  const config = [\n    {\n      render: (): string => {\n        if (!stakingPool) {\n          return '';\n        }\n\n        return `${getTokenName(stakingPool.stakingCurrency)}/${getTokenName(stakingPool.liquidCurrency)}`;\n      },\n      value: DEFAULT_VALUE\n    }\n  ];\n\n  return (\n    <Dropdown\n      activeContentClassName={classes.activeContent}\n      className={classes.root}\n      config={config}\n      onChange={noop}\n      placeholder={''}\n      value={DEFAULT_VALUE}\n    />\n  );\n});\n\nSelectToken.displayName = 'SelectToken';\n","import React, { FC, useContext } from 'react';\n\nimport { Card, List } from '@acala-dapp/ui-components';\nimport { FormatRatio, FormatBalance } from '@acala-dapp/react-components';\nimport { convertToFixed18, Fixed18 } from '@acala-network/app-util';\n\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const SystemInfo: FC = () => {\n  const { stakingPool, stakingPoolHelper } = useContext(StakingPoolContext);\n\n  if (!stakingPoolHelper || !stakingPool) {\n    return null;\n  }\n\n  return (\n    <Card header='System Info'\n      padding={false}>\n      <List style='list'>\n        <List.Item\n          label='Exchange Rate'\n          value={\n            <FormatBalance\n              pair={[\n                {\n                  balance: Fixed18.fromNatural(1),\n                  currency: stakingPool.stakingCurrency\n                },\n                {\n                  balance: Fixed18.fromNatural(1).div(stakingPoolHelper.liquidExchangeRate),\n                  currency: stakingPool.liquidCurrency\n\n                }\n              ]}\n              pairSymbol='≈'\n            />\n          }\n        />\n        <List.Item\n          label='Max Bonding Ratio'\n          value={\n            <FormatRatio data={convertToFixed18(stakingPool.maxBondRatio)} />\n          }\n        />\n        <List.Item\n          label='Min Bonding Ratio'\n          value={\n            <FormatRatio data={convertToFixed18(stakingPool.minBondRatio)} />\n          }\n        />\n      </List>\n    </Card>\n  );\n};\n","import React, { FC, useContext, useCallback, useMemo } from 'react';\nimport { noop } from 'lodash';\nimport { useFormik } from 'formik';\n\nimport { Fixed18, convertToFixed18 } from '@acala-network/app-util';\nimport { Grid, List } from '@acala-dapp/ui-components';\nimport { TxButton, BalanceInput, numToFixed18Inner, FormatBalance } from '@acala-dapp/react-components';\nimport { useFormValidator, useBalance } from '@acala-dapp/react-hooks';\n\nimport classes from './StakingConsole.module.scss';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const StakingConsole: FC = () => {\n  const { rewardRate, stakingPool, stakingPoolHelper } = useContext(StakingPoolContext);\n  const balance = useBalance(stakingPool ? stakingPool.stakingCurrency : '');\n\n  const validator = useFormValidator({\n    stakingBalance: {\n      currency: stakingPool && stakingPool.stakingCurrency,\n      type: 'balance'\n    }\n  });\n\n  const form = useFormik({\n    initialValues: {\n      stakingBalance: (('' as any) as number)\n    },\n    onSubmit: noop,\n    validate: validator\n  });\n\n  const resetForm = useCallback(() => {\n    form.resetForm();\n  }, [form]);\n\n  const receivedLiquidToken = useMemo<Fixed18>((): Fixed18 => {\n    if (!stakingPoolHelper || !form.values.stakingBalance) return Fixed18.ZERO;\n\n    return stakingPoolHelper.convertToLiquid(Fixed18.fromNatural(form.values.stakingBalance));\n  }, [stakingPoolHelper, form.values.stakingBalance]);\n\n  const handleStakingBalanceChange = useCallback((value: number): void => {\n    form.setFieldValue('stakingBalance', value);\n  }, [form]);\n\n  const profit = useMemo<Fixed18>((): Fixed18 => {\n    if (!rewardRate || !form.values.stakingBalance) return Fixed18.ZERO;\n\n    return Fixed18.fromNatural(form.values.stakingBalance).mul(convertToFixed18(rewardRate || 0));\n  }, [rewardRate, form.values.stakingBalance]);\n\n  if (!stakingPoolHelper || !stakingPool) {\n    return null;\n  }\n\n  const checkDisabled = (): boolean => {\n    if (!form.values.stakingBalance) {\n      return true;\n    }\n\n    if (form.errors.stakingBalance) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleMax = (): void => {\n    form.setFieldValue('stakingBalance', convertToFixed18(balance || 0).toNumber());\n  };\n\n  return (\n    <Grid\n      className={classes.root}\n      container\n    >\n      <Grid item>\n        <p className={classes.notice}>\n          Deposit DOT & Mint Liquid DOT (L-DOT). Your DOTs will be staked to earn returns, meanwhile you can use, trade and invest L-DOT balance in your wallet.\n        </p>\n      </Grid>\n      <Grid item>\n        <BalanceInput\n          error={form.errors.stakingBalance}\n          id='stakingBalance'\n          name='stakingBalance'\n          onChange={handleStakingBalanceChange}\n          onMax={handleMax}\n          showMaxBtn\n          token={stakingPool.stakingCurrency}\n          value={form.values.stakingBalance}\n        />\n      </Grid>\n      <Grid\n        container\n        item\n        justity='center'\n      >\n        <Grid item>\n          <TxButton\n            className={classes.txBtn}\n            disabled={checkDisabled()}\n            method='mint'\n            onSuccess={resetForm}\n            params={[numToFixed18Inner(form.values.stakingBalance)]}\n            section='homa'\n            size='middle'\n          >\n            Deposit\n          </TxButton>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <List>\n          <List.Item\n            label='Mint'\n            value={\n              <FormatBalance\n                balance={receivedLiquidToken}\n                currency={stakingPool.liquidCurrency}\n              />\n            }\n          />\n          <List.Item\n            label='Estimated Profit / Era'\n            value={\n              <FormatBalance\n                balance={profit}\n                currency={stakingPool.stakingCurrency}\n              />\n            }\n          />\n        </List>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { FC, useContext } from 'react';\n\nimport { formatDuration, getTokenName } from '@acala-dapp/react-components';\nimport { Dropdown, DropdownConfig } from '@acala-dapp/ui-components';\nimport { BareProps } from '@acala-dapp/ui-components/types';\n\nimport classes from './TargetRedeemList.module.scss';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\ninterface Props extends BareProps {\n  value: number;\n  onChange: (value: number) => void;\n}\n\nexport const TargetRedeemList: FC<Props> = ({\n  className,\n  onChange,\n  value\n}) => {\n  const { eraDuration, freeList, stakingPool, stakingPoolHelper } = useContext(StakingPoolContext);\n\n  const config: DropdownConfig[] = freeList.map(({ era, free }): DropdownConfig => {\n    if (!stakingPoolHelper || !stakingPool) return { render: (): null => null, value: '' };\n\n    const duration = formatDuration((era - stakingPoolHelper.currentEra) * eraDuration);\n\n    return {\n      /* eslint-disable-next-line react/display-name */\n      render: (): JSX.Element => {\n        return (\n          <div className={classes.item}>\n            <span>\n              {`at era ${era}(≈ ${duration} days later) has ${free.div(stakingPoolHelper.liquidExchangeRate)} ${getTokenName(stakingPool.liquidCurrency)} to redeem`}</span>\n          </div>\n        );\n      },\n      value: era\n    };\n  });\n\n  return (\n    <Dropdown\n      className={className}\n      config={config}\n      menuClassName={classes.menu}\n      onChange={onChange}\n      selectedRender={(era): string => era}\n      size='small'\n      value={value}\n    />\n  );\n};\n","import React, { FC, useContext, useState, useMemo, useCallback } from 'react';\nimport { noop } from 'lodash';\nimport { useFormik } from 'formik';\n\nimport { Fixed18 } from '@acala-network/app-util';\nimport { Grid, Radio, List, Condition } from '@acala-dapp/ui-components';\nimport { TxButton, BalanceInput, numToFixed18Inner, formatDuration, FormatBalance } from '@acala-dapp/react-components';\nimport { useFormValidator } from '@acala-dapp/react-hooks';\n\nimport classes from './RedeemConsole.module.scss';\nimport { TargetRedeemList } from './TargetRedeemList';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\ntype RedeemType = 'Immediately' | 'Target' | 'WaitForUnbonding';\n\nexport const RedeemConsole: FC = () => {\n  const { freeList, stakingPool, stakingPoolHelper, unbondingDuration } = useContext(StakingPoolContext);\n  const [redeemType, setRedeemType] = useState<RedeemType>('Immediately');\n  const [era, setEra] = useState<number>(0);\n\n  const freeLiquidityCurrencyAmount = useMemo((): number => {\n    if (!stakingPoolHelper) {\n      return 0;\n    }\n\n    return stakingPoolHelper.communalFree.div(stakingPoolHelper.liquidExchangeRate).toNumber();\n  }, [stakingPoolHelper]);\n\n  const freeLiquidityCurrencyAmountInTarget = useMemo((): number => {\n    if (!stakingPoolHelper) return 0;\n\n    const _result = freeList.find((item): boolean => item.era === era);\n\n    if (!_result) {\n      return 0;\n    }\n\n    return _result.free.div(stakingPoolHelper.liquidExchangeRate).toNumber();\n  }, [freeList, stakingPoolHelper, era]);\n\n  const getMaxLiquidCurrencyAmount = (): number => {\n    if (redeemType === 'Immediately') {\n      return freeLiquidityCurrencyAmount;\n    }\n\n    if (redeemType === 'Target') {\n      return freeLiquidityCurrencyAmountInTarget;\n    }\n\n    if (redeemType === 'WaitForUnbonding') {\n      return Number.POSITIVE_INFINITY;\n    }\n\n    return 0;\n  };\n\n  const validator = useFormValidator({\n    amount: {\n      currency: stakingPool?.liquidCurrency,\n      max: getMaxLiquidCurrencyAmount(),\n      min: 0,\n      type: 'balance'\n    },\n    target: {\n      equalMin: true,\n      min: stakingPoolHelper?.currentEra,\n      type: 'number'\n    }\n  });\n  const form = useFormik({\n    initialValues: {\n      amount: (('' as any) as number),\n      target: (('' as any) as number)\n    },\n    onSubmit: noop,\n    validate: validator\n  });\n\n  const targetEra = useMemo<number>((): number => {\n    if (!stakingPoolHelper || !stakingPool) return 0;\n\n    if (redeemType === 'Immediately') {\n      return stakingPoolHelper.currentEra;\n    }\n\n    if (redeemType === 'Target') {\n      return era;\n    }\n\n    if (redeemType === 'WaitForUnbonding') {\n      return stakingPool.currentEra.toNumber() + stakingPool.bondingDuration.toNumber() + 1;\n    }\n\n    return stakingPoolHelper.currentEra;\n  }, [stakingPoolHelper, stakingPool, era, redeemType]);\n\n  const climeFee = useMemo<Fixed18>((): Fixed18 => {\n    if (!stakingPoolHelper || !form.values.amount) return Fixed18.ZERO;\n\n    return stakingPoolHelper.claimFee(Fixed18.fromNatural(form.values.amount), targetEra);\n  }, [stakingPoolHelper, targetEra, form.values.amount]);\n\n  const handleAmountInput = useCallback((value: number) => {\n    form.setFieldValue('amount', value);\n  }, [form]);\n\n  if (!stakingPoolHelper || !stakingPool) {\n    return null;\n  }\n\n  const checkDisabled = (): boolean => {\n    if (!form.values.amount) {\n      return true;\n    }\n\n    if (form.errors.amount) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const getParams = (): string[] => {\n    const _params = [\n      numToFixed18Inner(form.values.amount),\n      redeemType as any\n    ];\n\n    if (redeemType === 'Target') {\n      _params[1] = {\n        Target: era\n      };\n    }\n\n    return _params;\n  };\n\n  return (\n    <Grid\n      className={classes.root}\n      container\n    >\n      <Grid item>\n        <p className={classes.notice}>Withdraw deposit and interest</p>\n      </Grid>\n      <Grid item>\n        <div className={classes.select}>\n          <Radio\n            checked={redeemType === 'Immediately'}\n            className={classes.item}\n            label={`Redeem Now, Total Free is ${freeLiquidityCurrencyAmount} ${stakingPool.liquidCurrency}`}\n            onClick={(): void => setRedeemType('Immediately')}\n          />\n          <Radio\n            checked={redeemType === 'Target'}\n            className={classes.item}\n            disabled={!freeList.length}\n            label={(\n              <div className={classes.targetInput}>\n                <span>Redeem in ERA</span>\n                {\n                  freeList.length ? (\n                    <TargetRedeemList\n                      className={classes.select}\n                      onChange={setEra}\n                      value={era}\n                    />\n                  ) : null\n                }\n                {\n                  freeLiquidityCurrencyAmountInTarget ? `Free is ${freeLiquidityCurrencyAmountInTarget}` : null\n                }\n              </div>\n            )}\n            onClick={(): void => setRedeemType('Target')}\n          />\n          <Radio\n            checked={redeemType === 'WaitForUnbonding'}\n            className={classes.item}\n            label='Redeem & Wait for Unbounding Period'\n            onClick={(): void => setRedeemType('WaitForUnbonding')}\n          />\n        </div>\n      </Grid>\n      <Grid item>\n        <BalanceInput\n          error={form.errors.amount}\n          id='amount'\n          name='amount'\n          onChange={handleAmountInput}\n          token={stakingPool.liquidCurrency}\n          value={form.values.amount}\n        />\n      </Grid>\n      <Grid item>\n        <p className={classes.eraInfo}>\n          Current Era = {stakingPoolHelper.currentEra} Unbounding Period = {formatDuration(unbondingDuration)} Days, Era {stakingPoolHelper.bondingDuration}\n        </p>\n      </Grid>\n      <Grid\n        container\n        item\n        justity='center'\n      >\n        <TxButton\n          className={classes.txBtn}\n          disabled={checkDisabled()}\n          method='redeem'\n          onSuccess={form.resetForm}\n          params={getParams()}\n          section='homa'\n        >\n          Redeem\n        </TxButton>\n      </Grid>\n      <Grid\n        className={classes.info}\n        item\n      >\n        <List>\n          <List.Item\n            label='Redeemed'\n            value={\n              <Condition condition={form.values.amount}>\n                <FormatBalance\n                  balance={form.values.amount || 0}\n                  currency={stakingPool.liquidCurrency}\n                />\n              </Condition>\n            }\n          />\n          <List.Item\n            label='Received'\n            value={\n              <Condition condition={form.values.amount}>\n                ≈ <FormatBalance\n                  balance={stakingPoolHelper.liquidExchangeRate.mul(Fixed18.fromNatural(form.values.amount).sub(climeFee)) || 0}\n                  currency={stakingPool.stakingCurrency}\n                />\n              </Condition>\n            }\n          />\n          <List.Item\n            label='ClaimFee'\n            value={\n              <FormatBalance\n                balance={climeFee}\n                currency={stakingPool.liquidCurrency}\n              />\n            }\n          />\n        </List>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { FC, useContext, useCallback } from 'react';\n\nimport { Card, Tabs } from '@acala-dapp/ui-components';\n\nimport { StakingConsole } from './StakingConsole';\nimport { RedeemConsole } from './RedeemConsole';\nimport classes from './Console.module.scss';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const Console: FC = () => {\n  const { setAction } = useContext(StakingPoolContext);\n\n  const handleChange = useCallback((value) => {\n    setAction(value);\n  }, [setAction]);\n\n  return (\n    <Card className={classes.root} >\n      <Tabs\n        onChange={handleChange}\n        type='button'\n      >\n        <Tabs.Panel\n          key='staking'\n          tab='Mint & Stake'\n        >\n          <StakingConsole />\n        </Tabs.Panel>\n        <Tabs.Panel\n          key='redeem'\n          tab='Redeem'\n        >\n          <RedeemConsole />\n        </Tabs.Panel>\n      </Tabs>\n    </Card>\n  );\n};\n","import React, { FC, useContext, ReactNode } from 'react';\nimport { Table, Card, TableConfig } from '@acala-dapp/ui-components';\nimport { Token, FormatBalance, FormatRatio } from '@acala-dapp/react-components';\nimport { CurrencyId } from '@acala-network/types/interfaces';\nimport { Fixed18 } from '@acala-network/app-util';\n\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const StakingPool: FC = () => {\n  const { stakingPool, stakingPoolHelper } = useContext(StakingPoolContext);\n  const tableConfig: TableConfig[] = [\n    {\n      align: 'left',\n      dataIndex: 'token',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: CurrencyId): ReactNode => (\n        <Token\n          currency={value}\n          icon\n        />\n      ),\n      title: 'Pool'\n    },\n    {\n      dataIndex: 'total',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: Fixed18): ReactNode => <FormatBalance balance={value} />,\n      title: 'Total'\n    },\n    {\n      dataIndex: 'totalBonded',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: Fixed18): ReactNode => <FormatBalance balance={value} />,\n      title: 'Total Bonded'\n    },\n    {\n      dataIndex: 'totalFree',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: Fixed18): ReactNode => <FormatBalance balance={value} />,\n      title: 'Total Free'\n    },\n    {\n      dataIndex: 'totalUnbonding',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: Fixed18): ReactNode => <FormatBalance balance={value} />,\n      title: 'Unbonding'\n    },\n    {\n      align: 'right',\n      dataIndex: 'bondRatio',\n      /* eslint-disable-next-line react/display-name */\n      render: (value: Fixed18): ReactNode => (\n        <FormatRatio data={value} />\n      ),\n      title: 'Bond Ratio'\n    }\n  ];\n  const data = [\n    {\n      bondRatio: stakingPoolHelper?.communalBondedRatio,\n      token: stakingPool?.stakingCurrency,\n      total: stakingPoolHelper?.communalTotal,\n      totalBonded: stakingPoolHelper?.totalBonded,\n      totalFree: stakingPoolHelper?.communalFree,\n      totalUnbonding: stakingPoolHelper?.unbondingToFree\n    }\n  ];\n\n  return (\n    <Card\n      header='Staking Pools'\n      padding={false}\n    >\n      <Table\n        config={tableConfig}\n        data={data}\n        showHeader\n      />\n    </Card>\n  );\n};\n","import React, { FC, useContext, useMemo } from 'react';\n\nimport { BaseTxHistory, FormatBalance, FormatTime, FormatHash } from '@acala-dapp/react-components';\nimport { TableConfig, Status } from '@acala-dapp/ui-components';\nimport { ExtrinsicHistoryData } from '@acala-dapp/react-hooks';\nimport { Fixed18 } from '@acala-network/app-util';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const Transaction: FC = () => {\n  const { stakingPool } = useContext(StakingPoolContext);\n\n  const config = useMemo<TableConfig[]>(() => {\n    if (!stakingPool) return [];\n\n    return [\n      {\n        align: 'left',\n        dataIndex: 'hash',\n        /* eslint-disable-next-line react/display-name */\n        render: (value): JSX.Element => <FormatHash hash={value} />,\n        title: 'Tx Hash'\n      },\n      {\n        align: 'left',\n        /* eslint-disable-next-line react/display-name */\n        render: (data: ExtrinsicHistoryData): JSX.Element | string => {\n          if (data.method === 'mint') {\n            return (\n              <FormatBalance\n                balance={Fixed18.fromParts(data?.params[0] || 0)}\n                currency={stakingPool.stakingCurrency}\n              />);\n          }\n\n          if (data.method === 'redeem') {\n            const keys = Object.keys(data?.params[1]);\n\n            return (\n              <>\n                <FormatBalance\n                  balance={Fixed18.fromParts(data.params[0] || 0)}\n                  currency={stakingPool.liquidCurrency}\n                />\n                {\n\n                  <span style={{ marginLeft: 8 }}>\n                    {(data.params[1] as any).Target ? `ERA: ${(data.params[1] as any).Target}` : keys }\n                  </span>\n                }\n              </>\n            );\n          }\n\n          return '/';\n        },\n        title: 'Token'\n      },\n      {\n        align: 'left',\n        dataIndex: 'method',\n        /* eslint-disable-next-line react/display-name */\n        render: (value: string): string | undefined => {\n          const paramsMap: Map<string, string> = new Map([\n            ['mint', 'Mint & Stake'],\n            ['redeem', 'Redeem'],\n            ['withdraw_redemption', 'Withdraw Redemption']\n          ]);\n\n          return paramsMap.get(value);\n        },\n        title: 'Stake/Redeem'\n      },\n      {\n        align: 'right',\n        dataIndex: 'time',\n        /* eslint-disable-next-line react/display-name */\n        render: (value): JSX.Element => <FormatTime time={value} />,\n        title: 'When'\n      },\n      {\n        align: 'right',\n        dataIndex: 'success',\n        /* eslint-disable-next-line react/display-name */\n        render: (value): JSX.Element => <Status success={value} />,\n        title: 'Result'\n      }\n    ];\n  }, [stakingPool]);\n\n  return (\n    <BaseTxHistory\n      config={config}\n      method={''}\n      section='homa'\n    />\n  );\n};\n","import React, { useContext, FC, ReactNode } from 'react';\n\nimport { Card, TableConfig, Table, Condition } from '@acala-dapp/ui-components';\nimport { useCurrentRedeem } from '@acala-dapp/react-hooks';\nimport { TxButton, FormatBalance } from '@acala-dapp/react-components';\nimport { convertToFixed18, Fixed18 } from '@acala-network/app-util';\n\nimport classes from './RedeemList.module.scss';\nimport { StakingPoolContext } from './StakingPoolProvider';\n\nexport const RedeemList: FC = () => {\n  const currentRedeem = useCurrentRedeem();\n  const { redeemList, stakingPool } = useContext(StakingPoolContext);\n\n  const renderHeader = (): ReactNode => {\n    return (\n      <div className={classes.header}>\n        <div>Redeem Tracker</div>\n        <div className={classes.currentRedeem}>\n          {\n            currentRedeem && stakingPool ? (\n              <FormatBalance\n                balance={convertToFixed18(currentRedeem.amount)}\n                currency={stakingPool.stakingCurrency}\n              />\n            ) : null\n          }\n          {\n            currentRedeem ? (\n              <TxButton\n                method='withdrawRedemption'\n                params={[]}\n                section='homa'\n              >\n                Withdraw\n              </TxButton>\n            ) : null\n          }\n        </div>\n      </div>\n    );\n  };\n\n  const tableConfig: TableConfig[] = [\n    {\n      align: 'left',\n      dataIndex: 'era',\n      /* eslint-disable-next-line react/display-name */\n      render: (era: number): ReactNode => {\n        return era;\n      },\n      title: 'Era'\n    },\n    {\n      dataIndex: 'era',\n      /* eslint-disable-next-line react/display-name */\n      render: (era: number): ReactNode => {\n        if (!stakingPool) {\n          return '';\n        }\n\n        if (stakingPool.currentEra.toNumber() >= era) {\n          return 'Done';\n        }\n\n        if (stakingPool.currentEra.toNumber() < era) {\n          return 'Redeeming';\n        }\n\n        return '';\n      },\n      title: 'Status'\n    },\n    {\n      align: 'right',\n      dataIndex: 'balance',\n      /* eslint-disable-next-line react/display-name */\n      render: (balance: Fixed18): ReactNode => {\n        return (\n          <FormatBalance\n            balance={balance}\n            currency={stakingPool?.stakingCurrency}\n          />\n        );\n      },\n      title: 'Amount'\n    }\n  ];\n\n  if (redeemList.length === 0 && !currentRedeem) {\n    return null;\n  }\n\n  return (\n    <Card\n      header={renderHeader()}\n      padding={false}\n    >\n      <Condition condition={!!redeemList.length}>\n        <Table\n          config={tableConfig}\n          data={redeemList}\n          showHeader\n          size='small'\n        />\n      </Condition>\n    </Card>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Grid } from '@acala-dapp/ui-components';\n\nimport { StakingTokeBalances } from './StakingTokenBalances';\nimport { SelectToken } from './SelectToken';\nimport { SystemInfo } from './SystemInfo';\nimport { Console } from './Console';\nimport { StakingPool } from './StakingPool';\nimport { Transaction } from './Transaction';\nimport { RedeemList } from './RedeemList';\n\nexport const Advanced: FC = () => {\n  return (\n    <Grid container>\n      <Grid item>\n        <SelectToken />\n      </Grid>\n      <Grid\n        container\n        item\n      >\n        <Grid\n          item\n          span={12}\n        >\n          <Console />\n        </Grid>\n        <Grid\n          container\n          item\n          span={12}\n        >\n          <Grid item>\n            <StakingTokeBalances />\n          </Grid>\n          <Grid item>\n            <SystemInfo />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <RedeemList />\n      </Grid>\n      <Grid item>\n        <StakingPool />\n      </Grid>\n      <Grid item>\n        <Transaction />\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { Fixed18 } from '@acala-network/app-util';\nimport { Card } from '@acala-dapp/ui-components';\n\nimport classes from './StakingOverview.module.scss';\nimport { useStakingTotalAmount, useConstants, useStakingValue, useStakingRewardAPR } from '@acala-dapp/react-hooks';\nimport { FormatBalance, TokenName, FormatValue, FormatRatio } from '@acala-dapp/react-components';\nimport { Balance as BalanceBlock } from '@acala-dapp/react-components/WalletBalance';\nimport balanceClasses from '@acala-dapp/react-components/WalletBalance.module.scss';\n\nconst Stake: FC = () => {\n  const amount = useStakingTotalAmount();\n  const value = useStakingValue();\n  const { stakingCurrency } = useConstants();\n\n  return (\n    <div className={clsx(classes.stake, classes.card)}>\n      <p className={classes.title}>Stake Balance</p>\n      <FormatBalance\n        balance={amount}\n        className={classes.stakingAmount}\n        currency={stakingCurrency}\n      />\n      <FormatValue\n        className={classes.stakingValue}\n        data={value}\n      />\n    </div>\n  );\n};\n\nconst Balance: FC = () => {\n  const { liquidCurrency, stakingCurrency } = useConstants();\n\n  return (\n    <div className={clsx(classes.balance, classes.card)}>\n      <p className={classes.title}>Wallet Balance</p>\n      <div className={classes.balanceContainer}>\n        {\n          [stakingCurrency, liquidCurrency].map((currency) => {\n            return (\n              <BalanceBlock\n                className={clsx(classes.balanceBlock, balanceClasses.item)}\n                currency={currency}\n                key={`staking-balance-${currency}`}\n              />\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nconst Property: FC = () => {\n  const APR = useStakingRewardAPR();\n  const amount = useStakingTotalAmount();\n  const { stakingCurrency } = useConstants();\n\n  const profitOneDay = useMemo<Fixed18>(() => {\n    if (!APR || !amount) return Fixed18.ZERO;\n\n    return amount.mul(APR).div(Fixed18.fromNatural(365));\n  }, [APR, amount]);\n\n  return (\n    <div className={classes.property}>\n      <div className={classes.wrapper}>\n        <div className={classes.content}>\n          <div className={clsx(classes.inner, classes.profit)}>\n            <p className={classes.label}>Profit/Day</p>\n            <FormatBalance\n              balance={profitOneDay}\n              className={classes.data}\n            />\n            <TokenName\n              className={classes.tokenName}\n              currency={stakingCurrency}\n            />\n          </div>\n          <div className={clsx(classes.inner, classes.APR)}>\n            <p className={classes.label}>Net APR</p>\n            <FormatRatio\n              className={classes.data}\n              data={APR}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const StakingOverview: FC = () => {\n  return (\n    <Card\n      contentClassName={classes.root}\n      padding={false}\n    >\n      <Stake />\n      <Property />\n      <Balance />\n    </Card>\n  );\n};\n","import React, { FC, useMemo, useCallback, useState, useRef } from 'react';\nimport { noop } from 'lodash';\n\nimport { Fixed18, convertToFixed18 } from '@acala-network/app-util';\nimport { Card, Tabs, List } from '@acala-dapp/ui-components';\nimport { TxButton, TwoWayBalanceInput, FormatBalance, eliminateGap } from '@acala-dapp/react-components';\nimport { useConstants, useStakingPoolHelper, useBalance } from '@acala-dapp/react-hooks';\n\nimport classes from './ExpressConsole.module.scss';\n\nconst Price: FC = () => {\n  const { liquidCurrency, stakingCurrency } = useConstants();\n  const helper = useStakingPoolHelper();\n\n  const exchangeRate = useMemo<Fixed18>((): Fixed18 => {\n    if (!helper) return Fixed18.ZERO;\n\n    return Fixed18.fromNatural(1).div(helper.liquidExchangeRate);\n  }, [helper]);\n\n  return (\n    <FormatBalance\n      pair={[\n        {\n          balance: 1,\n          currency: stakingCurrency\n        },\n        {\n          balance: exchangeRate,\n          currency: liquidCurrency\n        }\n      ]}\n      pairSymbol='≈'\n    />\n  );\n};\n\nconst StakePanel: FC = () => {\n  const { liquidCurrency, stakingCurrency } = useConstants();\n  const helper = useStakingPoolHelper();\n  const [amount, setAmount] = useState<number>(0);\n  const resetForm = useRef<() => void>(noop);\n  const [error, setError] = useState<boolean>(false);\n  const stakingCurrencyBalance = useBalance(stakingCurrency);\n\n  const exchangeRate = useMemo<Fixed18>((): Fixed18 => {\n    if (!helper) return Fixed18.ZERO;\n\n    return Fixed18.fromNatural(1).div(helper.liquidExchangeRate);\n  }, [helper]);\n\n  const params = useMemo(() => {\n    if (!stakingCurrencyBalance) return [];\n\n    const _amount = eliminateGap(Fixed18.fromNatural(amount), convertToFixed18(stakingCurrencyBalance), Fixed18.fromNatural(0.000001));\n\n    return [_amount.innerToString()];\n  }, [amount, stakingCurrencyBalance]);\n\n  const isDisabled = useMemo<boolean>((): boolean => {\n    if (!amount) return true;\n\n    return error;\n  }, [error, amount]);\n\n  const onSuccess = useCallback(() => {\n    setAmount(0);\n    resetForm.current();\n  }, [setAmount]);\n\n  return (\n    <div className={classes.panelContent}>\n      <div className={classes.main}>\n        <TwoWayBalanceInput\n          className={classes.balanceInput}\n          exchangeRate={exchangeRate}\n          exposeReset={(reset: () => void): void => { resetForm.current = reset; }}\n          initCurrencies={[stakingCurrency, liquidCurrency]}\n          onChange={setAmount}\n          onError={setError}\n          swap={false}\n        />\n        <List>\n          <List.Item\n            label='Price'\n            value={<Price />}\n          />\n        </List>\n      </div>\n      <TxButton\n        className={classes.actionBtn}\n        disabled={isDisabled}\n        method='mint'\n        onSuccess={onSuccess}\n        params={params}\n        section='homa'\n        size='large'\n      >\n        Stake\n      </TxButton>\n    </div>\n  );\n};\n\nconst UnstakePanel: FC = () => {\n  const { liquidCurrency, stakingCurrency } = useConstants();\n  const helper = useStakingPoolHelper();\n  const [amount, setAmount] = useState<number>(0);\n  const [error, setError] = useState<boolean>(false);\n  const resetForm = useRef<() => void>(noop);\n  const liquidCurrencyBalance = useBalance(liquidCurrency);\n\n  const exchangeRate = useMemo<Fixed18>((): Fixed18 => {\n    if (!helper) return Fixed18.ZERO;\n\n    return helper.liquidExchangeRate;\n  }, [helper]);\n\n  const maxToUnstake = useMemo<Fixed18>((): Fixed18 => {\n    if (!helper) return Fixed18.ZERO;\n\n    return helper.communalFree.div(helper.liquidExchangeRate);\n  }, [helper]);\n\n  const params = useMemo(() => {\n    if (!liquidCurrencyBalance) return [];\n\n    const _amount = eliminateGap(Fixed18.fromNatural(amount), convertToFixed18(liquidCurrencyBalance), Fixed18.fromNatural(0.000001));\n\n    return [_amount.innerToString(), 'Immediately'];\n  }, [amount, liquidCurrencyBalance]);\n\n  const isDisabled = useMemo<boolean>((): boolean => {\n    if (!amount) return true;\n\n    return error;\n  }, [error, amount]);\n\n  const onSuccess = useCallback(() => {\n    setAmount(0);\n    resetForm.current();\n  }, [setAmount]);\n\n  const fee = useMemo<Fixed18>((): Fixed18 => {\n    if (!helper || !amount) return Fixed18.ZERO;\n\n    return helper.claimFee(Fixed18.fromNatural(amount), helper.currentEra);\n  }, [helper, amount]);\n\n  return (\n    <div className={classes.panelContent}>\n      <div className={classes.main}>\n        <TwoWayBalanceInput\n          className={classes.balanceInput}\n          exchangeRate={exchangeRate}\n          exposeReset={(reset: () => void): void => { resetForm.current = reset; }}\n          initCurrencies={[liquidCurrency, stakingCurrency]}\n          max={maxToUnstake.toNumber(6, 3)}\n          onChange={setAmount}\n          onError={setError}\n        />\n        <List>\n          <List.Item\n            label='Max To Unstake'\n            value={\n              <FormatBalance\n                balance={maxToUnstake}\n                currency={liquidCurrency}\n              />\n            }\n          />\n          <List.Item\n            label='Price'\n            value={<Price />}\n          />\n          <List.Item\n            label='Fee'\n            value={\n              <FormatBalance\n                balance={fee}\n                currency={liquidCurrency}\n              />\n            }\n          />\n        </List>\n      </div>\n      <TxButton\n        className={classes.actionBtn}\n        disabled={isDisabled}\n        method='redeem'\n        onSuccess={onSuccess}\n        params={params}\n        section='homa'\n        size='large'\n      >\n        Unstake\n      </TxButton>\n    </div>\n  );\n};\n\nexport const ExpressConsole: FC = () => {\n  return (\n    <Card\n      padding={false}\n    >\n      <Tabs type='card'>\n        <Tabs.Panel\n          key='stake'\n          tab='Stake'\n        >\n          <StakePanel />\n        </Tabs.Panel>\n        <Tabs.Panel\n          key='unstake'\n          tab='Unstake'\n        >\n          <UnstakePanel />\n        </Tabs.Panel>\n      </Tabs>\n    </Card>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Grid } from '@acala-dapp/ui-components';\n\nimport { StakingOverview } from './StakingOverview';\nimport { ExpressConsole } from './ExpressConsole';\nimport { Transaction } from './Transaction';\n\nexport const Express: FC = () => {\n  return (\n    <Grid container>\n      <Grid item>\n        <StakingOverview />\n      </Grid>\n      <Grid item>\n        <ExpressConsole />\n      </Grid>\n      <Grid item>\n        <Transaction />\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Page, Tabs, ComingSoon } from '@acala-dapp/ui-components';\n\nimport { StakingPoolProvider } from './components/StakingPoolProvider';\nimport { Advanced } from './components/Advanced';\nimport { Express } from './components/Express';\n\nconst PageHoma: FC = () => {\n  return (\n    <StakingPoolProvider>\n      <Page>\n        <Page.Title title={'Liquid Asset'} />\n        <Page.Content>\n          <Tabs type='button'>\n            <Tabs.Panel key='express'\n              tab='Express'\n            >\n              <Express />\n            </Tabs.Panel>\n            <Tabs.Panel key='advance'\n              tab='Advanced'\n            >\n              <Advanced />\n            </Tabs.Panel>\n            <Tabs.Panel key='validators'\n              tab='Vote For Validators'\n            >\n              <ComingSoon />\n            </Tabs.Panel>\n          </Tabs>\n        </Page.Content>\n      </Page>\n    </StakingPoolProvider>\n  );\n};\n\nexport default PageHoma;\n"],"sourceRoot":""}