{"version":3,"sources":["../../page-swap/src/components/SwapConsole.module.scss","../../ui-components/src/TagInput.module.scss","../../page-swap/src/components/SlippageInputArea.module.scss","../../page-swap/src/components/AllMarkets.module.scss","../../page-swap/src/components/SwapProvider.tsx","../../page-swap/src/components/SwapInfo.tsx","../../ui-components/src/TagInput.tsx","../../page-swap/src/components/SlippageInputArea.tsx","../../page-swap/src/components/SwapConsole.tsx","../../page-swap/src/components/AllMarkets.tsx","../../page-swap/src/components/Transaction.tsx","../../page-swap/src/index.tsx"],"names":["module","exports","convertPool","origin","base","convertToFixed18","other","SwapContext","createContext","SwapProvider","memo","children","api","useApi","useInitialize","isInitialized","setEnd","dexBaseCurrency","useConstants","subscriptionRef","useRef","supplyCurrencies","useMemo","result","consts","dex","enabledCurrencyIds","toArray","push","targetCurrencies","slice","defaultSupplyCurrency","feeRate","getExchangeFee","useState","slippage","setSlippage","priceImpact","setPriceImpact","supplyCurrency","supplySize","targetCurrency","targetSize","pool","setPool","setCurrency","useCallback","supply","target","current","unsubscribe","tokenEq","derive","subscribe","toNumber","combineLatest","supplyPool","targetPool","calcSupply","pipe","map","eq","calcSupplyInOtherToBase","Fixed18","fromNatural","calcSupplyInBaseToOther","calcSupplyInOtherToOther","first","calcTarget","calcTargetInOtherToBase","calcTargetInBaseToOther","calcTargetInOtherToOther","useEffect","Provider","value","displayName","MarketRate","basePriceRate","currentPrice","usePrice","targetPrice","rate","div","ZERO","color","isLessThan","pair","balance","currency","pairSymbol","PriceImpact","useContext","oldExchangeRate","useDexExchangeRate","newExchangeRate","Math","abs","sub","undefined","data","SwapFee","isCrossBase","className","classes","info","mul","SwapInfo","atLeast","num","isNaN","exchangeRate","swapInfoRoot","TagInput","error","label","inputProps","clsx","root","NumberInput","input","SlippageInputArea","custom","setCustom","suggestValues","handleClick","renderSuggest","handleInput","_value","Number","title","suggest","key","onClick","id","max","min","name","onChange","placeholder","InputArea","addon","currencies","inputName","maxInput","onTokenChange","showMax","token","handleMax","inputAreaRoot","condition","enableTokenSelect","onMax","showMaxBtn","SwapBtn","swapBtn","icon","size","type","SwapConsole","supplyCurrencyBalance","useBalance","validator","useFormValidator","form","useFormik","initialValues","onSubmit","noop","validate","onSwap","resetForm","onSupplyChange","nextTick","setFieldValue","onTargetChange","onSupplyTokenChange","values","onTargetTokenChange","isDisabled","errors","maxSupplyInput","params","numToFixed18Inner","innerToString","padding","main","inputFields","inputFieldsInner","supplyAmount","txBtn","disabled","method","onSuccess","section","AllMarkets","_supplyCurrencies","filter","item","toString","tableConfig","align","render","width","config","headerCellClassName","headerCell","showHeader","Action","fromParts","Transaction","dataIndex","hash","time","success","PageSwap","Title","Content","container"],"mappings":"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","file":"static/js/7.9cb0b822.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SwapConsole_root__3G5EI\",\"inputAreaRoot\":\"SwapConsole_inputAreaRoot__376vf\",\"title\":\"SwapConsole_title__3TDaU\",\"main\":\"SwapConsole_main__oklzd\",\"inputFields\":\"SwapConsole_inputFields__23FPQ\",\"inputFieldsInner\":\"SwapConsole_inputFieldsInner__3w_no\",\"swapBtn\":\"SwapConsole_swapBtn__3XHdA\",\"txBtn\":\"SwapConsole_txBtn__1ctYw\",\"addon\":\"SwapConsole_addon__2fmH5\",\"swapInfoRoot\":\"SwapConsole_swapInfoRoot__1vqid\",\"info\":\"SwapConsole_info__24iir\",\"swapRoute\":\"SwapConsole_swapRoute__38Mhe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TagInput_root__3uRV9\",\"primary\":\"TagInput_primary__Tp6Iu\",\"clickable\":\"TagInput_clickable__28EM9\",\"error\":\"TagInput_error__2ELmQ\",\"input\":\"TagInput_input__2OQKl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SlippageInputArea_root__2w92S\",\"title\":\"SlippageInputArea_title__26KMB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerCell\":\"AllMarkets_headerCell___2Iue\"};","import React, { memo, createContext, FC, PropsWithChildren, useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport { map, first } from 'rxjs/operators';\n\nimport { Vec } from '@polkadot/types';\nimport { CurrencyId } from '@acala-network/types/interfaces';\nimport { Fixed18, calcTargetInOtherToBase, convertToFixed18, calcTargetInBaseToOther, calcTargetInOtherToOther, calcSupplyInOtherToBase, calcSupplyInBaseToOther, calcSupplyInOtherToOther } from '@acala-network/app-util';\nimport { DerivedDexPool } from '@acala-network/api-derive';\n\nimport { useApi, useConstants, useInitialize } from '@acala-dapp/react-hooks';\nimport { tokenEq } from '@acala-dapp/react-components';\nimport { PageLoading } from '@acala-dapp/ui-components';\n\nexport interface PoolData {\n  supplyCurrency: CurrencyId;\n  targetCurrency: CurrencyId;\n  supplySize: number;\n  targetSize: number;\n}\n\ninterface ContextData {\n  dexBaseCurrency: CurrencyId;\n\n  supplyCurrencies: (CurrencyId | string)[];\n  targetCurrencies: (CurrencyId | string)[];\n\n  calcSupply: (supplyCurrency: CurrencyId, targetCurrency: CurrencyId, target: number, slippage?: number) => Observable<number>;\n  calcTarget: (supplyCurrency: CurrencyId, targetCurrency: CurrencyId, supply: number, slippage?: number) => Observable<number>;\n\n  setCurrency: (target: CurrencyId, other: CurrencyId, callback?: (pool: PoolData) => void) => void;\n  pool: PoolData;\n\n  slippage: number;\n  setSlippage: (value: number) => void;\n\n  priceImpact: number;\n  setPriceImpact: (value: number) => void;\n\n  isInitialized: boolean;\n}\n\nconst convertPool = (origin: DerivedDexPool): { base: Fixed18; other: Fixed18 } => {\n  return {\n    base: convertToFixed18(origin.base),\n    other: convertToFixed18(origin.other)\n  };\n};\n\nexport const SwapContext = createContext<ContextData>({} as ContextData);\n\nexport const SwapProvider: FC<PropsWithChildren<{}>> = memo(({ children }) => {\n  const { api } = useApi();\n  const { isInitialized, setEnd } = useInitialize();\n  const { dexBaseCurrency } = useConstants();\n  const subscriptionRef = useRef<Subscription>();\n\n  const supplyCurrencies = useMemo(() => {\n    const result = (api.consts.dex.enabledCurrencyIds as Vec<CurrencyId>).toArray();\n\n    result.push(dexBaseCurrency);\n\n    return result;\n  }, [api.consts.dex.enabledCurrencyIds, dexBaseCurrency]);\n\n  const targetCurrencies = useMemo(() => supplyCurrencies.slice(), [supplyCurrencies]);\n\n  const defaultSupplyCurrency = useMemo(() => supplyCurrencies[0], [supplyCurrencies]);\n\n  const feeRate = useMemo(() => api.consts.dex.getExchangeFee, [api]);\n\n  const [slippage, setSlippage] = useState<number>(0.005);\n  const [priceImpact, setPriceImpact] = useState<number>(0);\n\n  const [pool, setPool] = useState<PoolData>({\n    supplyCurrency: '' as any as CurrencyId,\n    supplySize: 0,\n    targetCurrency: '' as any as CurrencyId,\n    targetSize: 0\n  });\n\n  const setCurrency = useCallback((supply: CurrencyId, target: CurrencyId): void => {\n    if (subscriptionRef.current) {\n      subscriptionRef.current.unsubscribe();\n    }\n\n    // base to other\n    if (tokenEq(supply, dexBaseCurrency) && !tokenEq(target, dexBaseCurrency)) {\n      subscriptionRef.current = ((api.derive as any).dex.pool(target) as Observable<DerivedDexPool>).subscribe((pool) => {\n        setPool({\n          supplyCurrency: supply,\n          supplySize: convertToFixed18(pool.base).toNumber(),\n          targetCurrency: target,\n          targetSize: convertToFixed18(pool.other).toNumber()\n        });\n      });\n    }\n\n    // other to base\n    if (tokenEq(target, dexBaseCurrency) && !tokenEq(supply, dexBaseCurrency)) {\n      subscriptionRef.current = ((api.derive as any).dex.pool(supply) as Observable<DerivedDexPool>).subscribe((pool) => {\n        setPool({\n          supplyCurrency: supply,\n          supplySize: convertToFixed18(pool.other).toNumber(),\n          targetCurrency: target,\n          targetSize: convertToFixed18(pool.base).toNumber()\n        });\n      });\n    }\n\n    // other to other\n    if (!tokenEq(target, dexBaseCurrency) && !tokenEq(supply, dexBaseCurrency)) {\n      subscriptionRef.current = combineLatest([\n        (api.derive as any).dex.pool(supply) as Observable<DerivedDexPool>,\n        (api.derive as any).dex.pool(target) as Observable<DerivedDexPool>\n      ]).subscribe(([supplyPool, targetPool]) => {\n        setPool({\n          supplyCurrency: supply,\n          supplySize: convertToFixed18(supplyPool.other).toNumber(),\n          targetCurrency: target,\n          targetSize: convertToFixed18(targetPool.other).toNumber()\n        });\n      });\n    }\n\n    if (tokenEq(supply, dexBaseCurrency) && tokenEq(target, dexBaseCurrency)) {\n      setPool({\n        supplyCurrency: supply,\n        supplySize: 0,\n        targetCurrency: target,\n        targetSize: 0\n      });\n    }\n  }, [api.derive, dexBaseCurrency, setPool]);\n\n  const calcSupply = useCallback((supplyCurrency: CurrencyId, targetCurrency: CurrencyId, target: number, slippage?: number): Observable<number> => {\n    // reload supply pool and target pool\n    return combineLatest([\n      (api.derive as any).dex.pool(supplyCurrency) as Observable<DerivedDexPool>,\n      (api.derive as any).dex.pool(targetCurrency) as Observable<DerivedDexPool>\n    ]).pipe(\n      map(([supplyPool, targetPool]) => {\n        if (!supplyPool || !targetPool) return 0;\n\n        if (!supplyCurrency.eq(dexBaseCurrency) && targetCurrency.eq(dexBaseCurrency)) {\n          // other to base\n          return calcSupplyInOtherToBase(\n            Fixed18.fromNatural(target),\n            convertPool(supplyPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        } else if (supplyCurrency.eq(dexBaseCurrency) && !targetCurrency.eq(dexBaseCurrency)) {\n          return calcSupplyInBaseToOther(\n            Fixed18.fromNatural(target),\n            convertPool(targetPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        } else if (!supplyCurrency.eq(dexBaseCurrency) && !targetCurrency.eq(dexBaseCurrency)) {\n          // other to other\n          return calcSupplyInOtherToOther(\n            Fixed18.fromNatural(target),\n            convertPool(supplyPool),\n            convertPool(targetPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        }\n\n        return 0;\n      }),\n      first()\n    );\n  }, [api.derive, dexBaseCurrency, feeRate]);\n\n  const calcTarget = useCallback((supplyCurrency: CurrencyId, targetCurrency: CurrencyId, supply: number, slippage?: number): Observable<number> => {\n    // reload supply pool and target pool\n    return combineLatest([\n      (api.derive as any).dex.pool(supplyCurrency) as Observable<DerivedDexPool>,\n      (api.derive as any).dex.pool(targetCurrency) as Observable<DerivedDexPool>\n    ]).pipe(\n      map(([supplyPool, targetPool]) => {\n        if (!supplyPool || !targetPool) return 0;\n\n        if (!supplyCurrency.eq(dexBaseCurrency) && targetCurrency.eq(dexBaseCurrency)) {\n          // other to base\n          return calcTargetInOtherToBase(\n            Fixed18.fromNatural(supply),\n            convertPool(supplyPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        } else if (supplyCurrency.eq(dexBaseCurrency) && !targetCurrency.eq(dexBaseCurrency)) {\n          return calcTargetInBaseToOther(\n            Fixed18.fromNatural(supply),\n            convertPool(targetPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        } else if (!supplyCurrency.eq(dexBaseCurrency) && !targetCurrency.eq(dexBaseCurrency)) {\n          // other to other\n          return calcTargetInOtherToOther(\n            Fixed18.fromNatural(supply),\n            convertPool(supplyPool),\n            convertPool(targetPool),\n            convertToFixed18(feeRate),\n            Fixed18.fromNatural(slippage || 0)\n          ).toNumber();\n        }\n\n        return 0;\n      }),\n      first()\n    );\n  }, [api.derive, dexBaseCurrency, feeRate]);\n\n  useEffect(() => {\n    if (pool.supplyCurrency && !isInitialized) {\n      setEnd();\n    }\n  }, [isInitialized, pool, setEnd]);\n\n  useEffect(() => {\n    setCurrency(defaultSupplyCurrency, dexBaseCurrency);\n  }, [defaultSupplyCurrency, dexBaseCurrency, setCurrency]);\n\n  return (\n    <SwapContext.Provider value={{\n      calcSupply,\n      calcTarget,\n      dexBaseCurrency,\n      isInitialized,\n      pool,\n      priceImpact,\n      setCurrency,\n      setPriceImpact,\n      setSlippage,\n      slippage,\n      supplyCurrencies,\n      targetCurrencies\n    }}>\n      {\n        isInitialized ? children : <PageLoading />\n      }\n    </SwapContext.Provider>\n  );\n});\n\nSwapProvider.displayName = 'SwapProvider';\n","import React, { FC, memo, useMemo, useContext, useEffect } from 'react';\n\nimport { Fixed18, convertToFixed18 } from '@acala-network/app-util';\nimport { CurrencyId } from '@acala-network/types/interfaces';\n\nimport { Tag } from '@acala-dapp/ui-components';\nimport { FormatBalance, FormatRatio, tokenEq } from '@acala-dapp/react-components';\nimport { usePrice, useDexExchangeRate, useConstants, useApi } from '@acala-dapp/react-hooks';\nimport { CurrencyLike } from '@acala-dapp/react-hooks/types';\n\nimport classes from './SwapConsole.module.scss';\nimport { SwapContext, PoolData } from './SwapProvider';\n\ninterface MarketRateProps {\n  current: CurrencyLike;\n  target: CurrencyLike;\n  basePriceRate: Fixed18;\n}\n\nconst MarketRate: FC<MarketRateProps> = ({ basePriceRate, current, target }) => {\n  const currentPrice = usePrice(current);\n  const targetPrice = usePrice(target);\n  const rate = useMemo(() => {\n    if (!currentPrice || !targetPrice) return Fixed18.ZERO;\n\n    return currentPrice.div(targetPrice);\n  }, [currentPrice, targetPrice]);\n\n  return (\n    <FormatBalance\n      color={basePriceRate.isLessThan(rate) ? 'error' : 'success'}\n      pair={[\n        {\n          balance: Fixed18.fromNatural(1),\n          currency: current\n        },\n        {\n          balance: rate,\n          currency: target\n        }\n      ]}\n      pairSymbol='≈'\n    />\n  );\n};\n\ninterface PriceImpactPorps {\n  pool: PoolData;\n  target: number;\n  supply: number;\n}\n\nconst PriceImpact: FC<PriceImpactPorps> = ({ pool, supply, target }) => {\n  const { setPriceImpact } = useContext(SwapContext);\n  const oldExchangeRate = useDexExchangeRate(pool.supplyCurrency, pool.targetCurrency);\n  const newExchangeRate = useDexExchangeRate(pool.supplyCurrency, pool.targetCurrency, supply, target);\n\n  const result = useMemo<number>(() => {\n    const result = Math.abs(newExchangeRate.sub(oldExchangeRate).div(oldExchangeRate).toNumber());\n\n    return result > 1 ? 1 : result;\n  }, [newExchangeRate, oldExchangeRate]);\n\n  useEffect(() => {\n    setPriceImpact(result);\n  }, [result, setPriceImpact]);\n\n  if (result < 0.001) return null;\n\n  return (\n    <p>\n      Price Impact is <FormatRatio\n        color={result < 0.01 ? 'success' : result > 0.05 ? 'error' : undefined}\n        data={result}\n      />\n    </p>\n  );\n};\n\n// TODO: it don't necessary for our dex\n// interface SwapRouteProps {\n//   pool: PoolData;\n// }\n\n// const SwapRoute: FC<SwapRouteProps> = ({ pool }) => {\n//   const { dexBaseCurrency } = useConstants();\n//   const isCrossBase = useMemo(() => {\n//     return !tokenEq(pool.supplyCurrency, dexBaseCurrency) && !tokenEq(pool.targetCurrency, dexBaseCurrency);\n//   }, [pool, dexBaseCurrency]);\n\n//   if (!isCrossBase) return null;\n\n//   return (\n//     <div className={clsx(classes.info, classes.swapRoute)}>\n//       Swap Route is\n//       <Token currency={pool.supplyCurrency}\n//         icon/>\n//       <ArrowRightOutlined />\n//       <Token currency={dexBaseCurrency}\n//         icon/>\n//       <ArrowRightOutlined />\n//       <Token currency={pool.targetCurrency}\n//         icon/>\n//     </div>\n//   );\n// };\n\ninterface SwapFeeProps {\n  pool: PoolData;\n}\n\nconst SwapFee: FC<SwapFeeProps> = ({ pool }) => {\n  const { dexBaseCurrency } = useConstants();\n  const { api } = useApi();\n  const isCrossBase = useMemo(() => {\n    return !tokenEq(pool.supplyCurrency, dexBaseCurrency) && !tokenEq(pool.targetCurrency, dexBaseCurrency);\n  }, [pool, dexBaseCurrency]);\n\n  return (\n    <div className={classes.info}>\n      Transaction Fee is <FormatRatio data={convertToFixed18(api.consts.dex.getExchangeFee).mul(isCrossBase ? Fixed18.fromNatural(2) : Fixed18.fromNatural(1))} />\n    </div>\n  );\n};\n\ninterface Props {\n  supplyCurrency: CurrencyId;\n  targetCurrency: CurrencyId;\n  target: number;\n  supply: number;\n}\n\nexport const SwapInfo: FC<Props> = memo(({\n  supply,\n  supplyCurrency,\n  target,\n  targetCurrency\n}) => {\n  const {\n    pool,\n    slippage\n  } = useContext(SwapContext);\n\n  const atLeast = useMemo((): Fixed18 | number => {\n    const num = Fixed18.fromNatural(target).div(Fixed18.fromNatural(1 + slippage));\n\n    return num.isNaN() ? 0 : num;\n  }, [target, slippage]);\n  const exchangeRate = useDexExchangeRate(pool.supplyCurrency, pool.targetCurrency);\n\n  return (\n    <div className={classes.swapInfoRoot}>\n      <p>\n        You are selling\n        <Tag>\n          <FormatBalance balance={supply}\n            currency={supplyCurrency} />\n        </Tag>\n        for at least\n        <Tag>\n          <FormatBalance\n            balance={atLeast}\n            currency={targetCurrency}\n          />\n        </Tag>\n      </p>\n      <p>\n        Current Market Price is <MarketRate\n          basePriceRate={exchangeRate}\n          current={supplyCurrency}\n          target={targetCurrency}\n        />\n      </p>\n      <SwapFee pool={pool} />\n      <PriceImpact\n        pool={pool}\n        supply={supply}\n        target={target}\n      />\n    </div>\n  );\n});\n\nSwapInfo.displayName = 'SwapInfo';\n","import React, { FC } from 'react';\nimport clsx from 'clsx';\n\nimport { NumberInputProps, NumberInput } from './NumberInput';\nimport classes from './TagInput.module.scss';\n\ninterface Props extends NumberInputProps{\n  label: string;\n  error?: boolean;\n}\n\nexport const TagInput: FC<Props> = ({\n  className,\n  error,\n  label,\n  ...inputProps\n}) => {\n  return (\n    <div\n      className={\n        clsx(\n          className,\n          classes.root,\n          {\n            [classes.error]: error\n          }\n        )\n      }\n    >\n      <NumberInput {...inputProps}\n        className={classes.input} />\n      {label ? <span>{label}</span> : null}\n    </div>\n  );\n};\n","import React, { FC, ReactElement, useContext, useCallback, useState, useMemo } from 'react';\n\nimport { TagGroup, Tag } from '@acala-dapp/ui-components';\nimport { TagInput } from '@acala-dapp/ui-components/TagInput';\n\nimport classes from './SlippageInputArea.module.scss';\nimport { SwapContext } from './SwapProvider';\n\nconst SLIPPAGE_MAX = 50;\nconst SLIPPAGE_MIN = 0;\n\nexport const SlippageInputArea: FC = () => {\n  const { setSlippage, slippage } = useContext(SwapContext);\n  const [custom, setCustom] = useState<number>(0);\n  const suggestValues = useMemo(() => [0.001, 0.005, 0.01], []);\n  const suggestedIndex = 1;\n\n  const handleClick = useCallback((num: number): void => {\n    setSlippage(num);\n  }, [setSlippage]);\n\n  const renderSuggest = useCallback((num: number): string => {\n    return `${num * 100}%${num === suggestValues[suggestedIndex] ? ' (suggested)' : ''}`;\n  }, [suggestValues]);\n\n  const handleInput = useCallback((_value: number | string): void => {\n    const value = Number(_value);\n\n    setCustom(value);\n    setSlippage(value / 100);\n  }, [setSlippage, setCustom]);\n\n  return (\n    <div className={classes.root}> <p className={classes.title}>Limit addtion price slippage</p>\n      <TagGroup>\n        {\n          suggestValues.map((suggest): ReactElement => {\n            return (\n              <Tag\n                color={slippage === suggest ? 'primary' : 'white'}\n                key={`suggest-${suggest}`}\n                onClick={(): void => handleClick(suggest) }\n              >\n                {renderSuggest(suggest)}\n              </Tag>\n            );\n          })\n        }\n        <TagInput\n          id='custom'\n          label='%'\n          max={SLIPPAGE_MAX}\n          min={SLIPPAGE_MIN}\n          name='custom'\n          onChange={handleInput}\n          placeholder='Custom'\n          value={custom}\n        />\n      </TagGroup>\n    </div>\n  );\n};\n","import React, { FC, memo, useContext, ReactElement, ReactNode, useCallback, useMemo } from 'react';\nimport { noop } from 'lodash';\nimport { useFormik } from 'formik';\n\nimport { CurrencyId } from '@acala-network/types/interfaces';\n\nimport { Card, nextTick, IconButton, Condition } from '@acala-dapp/ui-components';\nimport { BalanceInput, TxButton, numToFixed18Inner, DexExchangeRate, FormatBalance } from '@acala-dapp/react-components';\nimport { useFormValidator, useBalance } from '@acala-dapp/react-hooks';\nimport { Fixed18, convertToFixed18 } from '@acala-network/app-util';\nimport { CurrencyLike } from '@acala-dapp/react-hooks/types';\nimport { CurrencyChangeFN } from '@acala-dapp/react-components/types';\n\nimport classes from './SwapConsole.module.scss';\nimport { SwapInfo } from './SwapInfo';\nimport { SlippageInputArea } from './SlippageInputArea';\nimport { SwapContext } from './SwapProvider';\n\ninterface InputAreaProps {\n  addon?: ReactNode;\n  error: any;\n  title: string;\n  currencies: (CurrencyId | string)[];\n  token: CurrencyLike;\n  onTokenChange: CurrencyChangeFN;\n  value: number;\n  onChange: (value: number) => void;\n  inputName: string;\n  showMax?: boolean;\n  maxInput?: Fixed18;\n}\n\nconst InputArea: FC<InputAreaProps> = ({\n  addon,\n  currencies,\n  error,\n  inputName,\n  maxInput,\n  onChange,\n  onTokenChange,\n  showMax = false,\n  title,\n  token,\n  value\n}) => {\n  const handleMax = useCallback(() => {\n    if (!onChange || !maxInput) return;\n\n    onChange(maxInput.toNumber());\n  }, [maxInput, onChange]);\n\n  return (\n    <div className={classes.inputAreaRoot}>\n      <div className={classes.title}>\n        {title}\n\n        <Condition condition={!!maxInput}>\n          <p>\n            Max:\n            <FormatBalance\n              balance={maxInput as Fixed18}\n              currency={token}\n            />\n          </p>\n        </Condition>\n      </div>\n      <BalanceInput\n        className={classes.input}\n        currencies={currencies}\n        enableTokenSelect\n        error={error}\n        name={inputName}\n        onChange={onChange}\n        onMax={handleMax}\n        onTokenChange={onTokenChange}\n        showMaxBtn={showMax}\n        token={token}\n        value={value}\n      />\n      {addon}\n    </div>\n  );\n};\n\ninterface SwapBtn {\n  onClick: () => void;\n}\n\nfunction SwapBtn ({ onClick }: SwapBtn): ReactElement {\n  return (\n    <IconButton\n      className={classes.swapBtn}\n      color='primary'\n      icon='swap'\n      onClick={onClick}\n      size='large'\n      type='border'\n    />\n  );\n}\n\nexport const SwapConsole: FC = memo(() => {\n  const {\n    calcSupply,\n    calcTarget,\n    pool,\n    priceImpact,\n    setCurrency,\n    slippage,\n    supplyCurrencies,\n    targetCurrencies\n  } = useContext(SwapContext);\n  const supplyCurrencyBalance = useBalance(pool.supplyCurrency);\n\n  const validator = useFormValidator({\n    supply: {\n      currency: pool.supplyCurrency,\n      max: pool.supplySize,\n      min: 0,\n      type: 'balance'\n    },\n    target: {\n      max: pool.targetSize,\n      min: 0,\n      type: 'number'\n    }\n  });\n\n  const form = useFormik({\n    initialValues: {\n      supply: (('' as any) as number),\n      target: (('' as any) as number)\n    },\n    onSubmit: noop,\n    validate: validator\n  });\n\n  const onSwap = useCallback((): void => {\n    setCurrency(pool.targetCurrency, pool.supplyCurrency);\n    form.resetForm();\n  }, [setCurrency, pool.targetCurrency, pool.supplyCurrency, form]);\n\n  const onSupplyChange = useCallback((value: number): void => {\n    calcTarget(pool.supplyCurrency, pool.targetCurrency, value).subscribe((target) => {\n      nextTick(() => form.setFieldValue('target', target));\n    });\n\n    nextTick(() => form.setFieldValue('supply', value));\n  }, [calcTarget, pool.supplyCurrency, pool.targetCurrency, form]);\n\n  const onTargetChange = useCallback((value: number): void => {\n    calcSupply(pool.supplyCurrency, pool.targetCurrency, value).subscribe((supply) => {\n      nextTick(() => form.setFieldValue('supply', supply));\n    });\n\n    nextTick(() => form.setFieldValue('target', value));\n  }, [calcSupply, pool.supplyCurrency, pool.targetCurrency, form]);\n\n  const onSupplyTokenChange = useCallback((token: CurrencyId): void => {\n    setCurrency(token, pool.targetCurrency);\n\n    calcSupply(token, pool.targetCurrency, form.values.target).subscribe((supply) => {\n      if (supply) nextTick(() => form.setFieldValue('supply', supply));\n    });\n  }, [calcSupply, form, pool.targetCurrency, setCurrency]);\n\n  const onTargetTokenChange = useCallback((token: CurrencyId): void => {\n    setCurrency(pool.supplyCurrency, token);\n\n    calcTarget(pool.supplyCurrency, token, form.values.supply).subscribe((target) => {\n      if (target) nextTick(() => form.setFieldValue('target', target));\n    });\n  }, [calcTarget, form, pool.supplyCurrency, setCurrency]);\n\n  const isDisabled = useMemo((): boolean => {\n    if (form.errors.supply || form.errors.target) {\n      return true;\n    }\n\n    if (!(form.values.target && form.values.supply)) {\n      return true;\n    }\n\n    return false;\n  }, [form]);\n\n  const maxSupplyInput = useMemo<Fixed18 | undefined>(() => {\n    return supplyCurrencyBalance ? convertToFixed18(supplyCurrencyBalance).min(Fixed18.fromNatural(pool.supplySize)) : undefined;\n  }, [supplyCurrencyBalance, pool.supplySize]);\n\n  const params = useMemo(() => {\n    return [\n      pool.supplyCurrency,\n      numToFixed18Inner(form.values.supply),\n      pool.targetCurrency,\n      Fixed18.fromNatural(form.values.target).div(Fixed18.fromNatural(1 + slippage)).innerToString()\n    ];\n  }, [form, pool, slippage]);\n\n  return (\n    <Card className={classes.root}\n      padding={false}>\n      <div className={classes.main}>\n        <div className={classes.inputFields}>\n          <div className={classes.inputFieldsInner}>\n            <InputArea\n              currencies={supplyCurrencies}\n              error={form.errors.supply}\n              inputName='supply'\n              maxInput={maxSupplyInput}\n              onChange={onSupplyChange}\n              onTokenChange={onSupplyTokenChange}\n              showMax={true}\n              title='Pay With'\n              token={pool.supplyCurrency}\n              value={form.values.supply as number}\n            />\n            <SwapBtn onClick={onSwap} />\n            <InputArea\n              currencies={targetCurrencies}\n              error={form.errors.target}\n              inputName='target'\n              onChange={onTargetChange}\n              onTokenChange={onTargetTokenChange}\n              title='Receive (Estimate)'\n              token={pool.targetCurrency}\n              value={form.values.target}\n            />\n          </div>\n          <div className={classes.addon}>\n            <p>Dex Price</p>\n            <DexExchangeRate\n              supply={pool.supplyCurrency}\n              supplyAmount={form.values.supply as number}\n              target={pool.targetCurrency}\n            />\n          </div>\n        </div>\n        <TxButton\n          className={classes.txBtn}\n          color={priceImpact > 0.05 ? 'danger' : 'primary'}\n          disabled={isDisabled}\n          method='swapCurrency'\n          onSuccess={form.resetForm}\n          params={params}\n          section='dex'\n          size='large'\n        >\n          {priceImpact > 0.05 ? 'Swap Anyway' : 'Swap'}\n        </TxButton>\n      </div>\n      <SwapInfo\n        supply={form.values.supply}\n        supplyCurrency={pool.supplyCurrency}\n        target={form.values.target}\n        targetCurrency={pool.targetCurrency}\n      />\n      <SlippageInputArea />\n    </Card>\n  );\n});\n\nSwapConsole.displayName = 'SwapConsole';\n","import React, { FC, useContext, ReactNode } from 'react';\n\nimport { CurrencyId } from '@acala-network/types/interfaces';\n\nimport { Section, Card, Table, TableConfig } from '@acala-dapp/ui-components';\nimport { Token, DexExchangeRate, DexPoolSize } from '@acala-dapp/react-components';\n\nimport { SwapContext } from './SwapProvider';\nimport classes from './AllMarkets.module.scss';\n\nexport const AllMarkets: FC = () => {\n  const { dexBaseCurrency, supplyCurrencies } = useContext(SwapContext);\n  const _supplyCurrencies = supplyCurrencies.filter((item: string | CurrencyId) => item.toString() !== dexBaseCurrency.toString());\n  const tableConfig: TableConfig[] = [\n    {\n      align: 'left',\n      /* eslint-disable-next-line react/display-name */\n      render: (token: string | CurrencyId): ReactNode => (\n        <Token currency={token}\n          icon\n        />\n      ),\n      title: 'Token Pair',\n      width: 1\n    },\n    {\n      align: 'left',\n      /* eslint-disable-next-line react/display-name */\n      render: (token: string | CurrencyId): ReactNode => <DexExchangeRate supply={token} />,\n      title: 'Dex Price',\n      width: 3\n    },\n    {\n      align: 'left',\n      /* eslint-disable-next-line react/display-name */\n      render: (token: string | CurrencyId): ReactNode => <DexPoolSize token={token} />,\n      title: 'Pool Size',\n      width: 3\n    }\n  ];\n\n  return (\n    <Section title='All Markets'>\n      <Card padding={false}>\n        <Table\n          config={tableConfig}\n          data={_supplyCurrencies}\n          headerCellClassName={classes.headerCell}\n          showHeader\n        />\n      </Card>\n    </Section>\n  );\n};\n","import React, { FC, useRef, ReactNode } from 'react';\n\nimport { BaseTxHistory, FormatBalance, FormatTime, FormatHash } from '@acala-dapp/react-components';\nimport { TableConfig, Status } from '@acala-dapp/ui-components';\nimport { Fixed18 } from '@acala-network/app-util';\n\ninterface ActionProps {\n  supply: string;\n  supplyCurrency: string;\n  target: string;\n  targetCurrency: string;\n}\n\nconst Action: FC<ActionProps> = ({\n  supply,\n  supplyCurrency,\n  target,\n  targetCurrency\n}) => {\n  return (\n    <FormatBalance\n      pair={[\n        {\n          balance: Fixed18.fromParts(supply),\n          currency: supplyCurrency\n        },\n        {\n          balance: Fixed18.fromParts(target),\n          currency: targetCurrency\n        }\n      ]}\n      pairSymbol='->'\n    />\n  );\n};\n\nexport const Transaction: FC = () => {\n  const config = useRef<TableConfig[]>([\n    {\n      align: 'left',\n      dataIndex: 'hash',\n      /* eslint-disable-next-line react/display-name */\n      render: (value): ReactNode => <FormatHash hash={value} />,\n      title: 'Tx Hash',\n      width: 1\n    },\n    {\n      align: 'left',\n      dataIndex: 'params',\n      /* eslint-disable-next-line react/display-name */\n      render: (value): ReactNode => (\n        <Action\n          supply={value[1]}\n          supplyCurrency={value[0]}\n          target={value[3]}\n          targetCurrency={value[2]}\n        />\n      ),\n      title: 'Action',\n      width: 3\n    },\n    {\n      align: 'left',\n      dataIndex: 'time',\n      /* eslint-disable-next-line react/display-name */\n      render: (value): ReactNode => (\n        <FormatTime time={value} />\n      ),\n      title: 'When',\n      width: 1\n    },\n    {\n      align: 'right',\n      dataIndex: 'success',\n      /* eslint-disable-next-line react/display-name */\n      render: (value): ReactNode => (\n        <Status success={value} />\n      ),\n      title: 'Result',\n      width: 1\n    }\n  ]);\n\n  return (\n    <BaseTxHistory\n      config={config.current}\n      method='swap_currency'\n      section='dex'\n    />\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Page, Grid } from '@acala-dapp/ui-components';\nimport { WalletBalance } from '@acala-dapp/react-components';\nimport { SwapConsole } from './components/SwapConsole';\nimport { AllMarkets } from './components/AllMarkets';\nimport { Transaction } from './components/Transaction';\nimport { SwapProvider } from './components/SwapProvider';\n\nconst PageSwap: FC = () => {\n  return (\n    <SwapProvider>\n      <Page>\n        <Page.Title title='Swap' />\n        <Page.Content>\n          <Grid container>\n            <Grid item>\n              <WalletBalance />\n            </Grid>\n            <Grid item>\n              <SwapConsole />\n            </Grid>\n            <Grid item>\n              <AllMarkets />\n            </Grid>\n            <Grid item>\n              <Transaction />\n            </Grid>\n          </Grid>\n        </Page.Content>\n      </Page>\n    </SwapProvider>\n  );\n};\n\nexport default PageSwap;\n"],"sourceRoot":""}